# tutorboard/views.py

from django.http import HttpResponseRedirect, HttpResponse
from django.views.generic import ListView, CreateView, UpdateView
from django.views.generic.base import View
from django.shortcuts import render
from django.template import RequestContext, loader
from django.db.models import Q
from .forms import SearchForm, TutorForm, CapabilityForm, AvailabilityForm, SubjectForm
from django.utils import simplejson

from django.forms.models import modelformset_factory

from tutorboard.models import Tutor, Capability, Subject, Energy, Skill, Presence, Archetype, Location, Style, LevelPreference, StudentEngagement, SubjectUpdate

from django.shortcuts import render_to_response
from django.forms.models import modelformset_factory
from django.core.context_processors import csrf
from django.core.exceptions import ObjectDoesNotExist, MultipleObjectsReturned
from django.template import RequestContext

from django.template.loader import render_to_string

# downloaded from djangosnippets.com[942]
from snippets import render_block_to_string


class TutorSearch(View):
    tutor_list = []
    level_list = []
    template_name = "tutorboard/tutor_list.html"
    
    def get(self, request, *args, **kwargs):
        tutor_list = Tutor.objects.all()
        subject_list = Subject.objects.all()
        energy_list = Energy.objects.all()
        skill_list = Skill.objects.all()
        presence_list = Presence.objects.all()
        archetype_list = Archetype.objects.all()
        location_list = Location.objects.all()
        style_list = Style.objects.all()
        preference_list = LevelPreference.objects.all()
        engagement_list = StudentEngagement.objects.all()
        area_list = ['Math', 'Verbal']
        program_list = ['Echelon', 'Cornerstone', 'Academic']
        gender_list = ['Male', 'Female', 'Other']
        level_list = ['Trained', 'Professional', 'Endorsed', 'Expert', 'Director']
        
        searchForm = SearchForm()
        
        context = RequestContext (request, {'tutor_list' : tutor_list,
                                  'subject_list': subject_list,
                                  'energy_list': energy_list,
                                  'skill_list': skill_list,
                                  'archetype_list': archetype_list,
                                  'presence_list': presence_list,
                                  'location_list': location_list,
                                  'style_list': style_list,
                                  'preference_list': preference_list,
                                  'engagement_list': engagement_list,
                                  'area_list': area_list,
                                  'program_list': program_list,
                                  'gender_list': gender_list,
                                  'level_list': level_list,
                                  
                                  'search_form':searchForm})
        return render(request, self.template_name, context)
    
    def post(self, request, *args, **kwargs):
        form = SearchForm(request.POST)
        tutors = Tutor.objects.all()
        capabilities = Capability.objects.all()
        if form.is_valid():
            availability = form.cleaned_data['availability']
            level = form.cleaned_data['level']
            subject = form.cleaned_data['subject']
            archetype = form.cleaned_data['archetype']
            neighborhood = form.cleaned_data['neighborhood']
            energy = form.cleaned_data['energy']
            presence = form.cleaned_data['presence']
            tags = form.cleaned_data['tags']
            preference = form.cleaned_data['preference']
            search = form.cleaned_data['search']
            
            # This might be horrifically slow
            if search:
                tutors = tutors.filter(Q(lname__icontains = search) |
                                       Q(fname__icontains = search) |
                                       Q(gotofor__icontains = search) |
                                       Q(neighborhood__icontains = search) |
                                       Q(bioline1__icontains = search) |
                                       Q(bioline2__icontains = search) |
                                       Q(bioline3__icontains = search) |
                                       Q(bioline4__icontains = search) |
                                       Q(bioline5__icontains = search) |
                                       Q(capability__subject__name__icontains = search)
                                       )
            
            if availability == 'zero':
                tutors = tutors.filter(availability__lt= 5)
            elif availability == 'five':
                tutors = tutors.filter(availability__lt= 10).filter(availability__gt= 4)
            elif availability == 'ten':
                tutors = tutors.filter(availability__gt= 9)
    
            if level:
                tutors = tutors.filter(capability__level__iexact = level)
    
            if subject == 'academic':
                tutors.exclude(capability__subject__name__icontains='SAT')
                tutors.exclude(capability__subject__name__icontains='Echelon')
                tutors.exclude(capability__subject__name__icontains='Cornerstone')
            elif subject:
                tutors = tutors.filter(capability__subject__name__iexact = subject)
        
        tutors = tutors.distinct()
        context = RequestContext (request, {'tutor_list' : tutors, 
                                  'capability_list': capabilities,
                                  'search_form':form})
        return render(request, self.template_name, context)

class TutorCreate(CreateView):
    model = Tutor
    template_name = "tutorboard/tutor_create.html"
    success_url = ".."
    form_class = TutorForm
    

def update_tutor(request, tutor_id):
    if tutor_id == '0':
        TutorFormSet = modelformset_factory(Tutor, form=TutorForm, extra=1, can_delete=True)
    else:
        TutorFormSet = modelformset_factory(Tutor, form=TutorForm, extra=0, can_delete=True)
    CapabilityFormSet = modelformset_factory(Capability, form=CapabilityForm, extra=5, can_delete=True)
    subject_list = Subject.objects.all()
    
    nextTutor = findNextTutor(tutor_id)
    prevTutor = findPrevTutor(tutor_id)
    #nextTutorLinkHtml = 'HTMLGoesHere'

    if request.method == 'POST':
        # form is being submitted
        tutor_formset = TutorFormSet(request.POST, request.FILES, prefix='tutors')
        capability_formset = CapabilityFormSet(request.POST, request.FILES, prefix='capabilities')
        
        # Check which save button was pressed.
        # If Save and Next was clicked, respond with the next tutor
        redirectToTutor = None
        if 'save' in request.POST:
            redirectToTutor = tutor_id
        elif 'saveAndNext' in request.POST:
            redirectToTutor = str(nextTutor.id)
        
        
        # Check if the form is valid
        if  tutor_formset.is_valid():
            tutor_formset.save()

            for capability_form in capability_formset:
                if capability_form.is_valid():
                    deletable = capability_form.cleaned_data['DELETE']
                    capability_form.save()
                    if deletable:
                        capability_form.instance.delete()

            success= "Tutor Saved"
            return HttpResponseRedirect('/tutorboard/' + redirectToTutor + '/update/')
        else:  
            form_errors = tutor_formset.errors
            return render_to_response ('tutorboard/tutor_update.html', {
                                  'tutor_formset' : tutor_formset, 
                                  'capability_formset': capability_formset,
                                  'tutor_id': tutor_id,
                                  'next_tutor': nextTutor,
                                  'prev_tutor': prevTutor,
                                  'subject_list': subject_list,
                                  'form_errors': form_errors},
                      context_instance=RequestContext(request))

    else:
        # display tutor data to edit
        tutor_formset = TutorFormSet(queryset=Tutor.objects.all().filter(pk=tutor_id), prefix='tutors') 
        capability_formset = CapabilityFormSet(queryset=Capability.objects.all().filter(tutor__id=tutor_id), prefix='capabilities')

        for form in capability_formset.extra_forms:
            form.fields['tutor'].initial = tutor_id
        
        return render_to_response('tutorboard/tutor_update.html', {
                                  'tutor_formset' : tutor_formset,
                                  'capability_formset': capability_formset,
                                  'tutor_id': tutor_id,
                                  'next_tutor': nextTutor,
                                  'prev_tutor': prevTutor,
                                  'subject_list': subject_list},
                                  context_instance=RequestContext(request))


def tutor_availability(request):
    template_name = 'tutorboard/tutor_availability.html'
    TutorFormSet = modelformset_factory(Tutor, form=AvailabilityForm)
    if request.method == 'POST':
        formset = TutorFormSet(request.POST, request.FILES)
        if formset.is_valid():
            formset.save()
    else:
        formset = TutorFormSet()

    context = RequestContext (request, {'formset':formset})
    return render(request, template_name, context)

class SubjectListAjax(View):

    template_name = "tutorboard/partials/subject_checkboxes.html"
    
    '''
    Make a get that will return the subject list properly checked
    
    1. Get all capabilities for tutor
    2. Get all subjects
    3. Define a model dictionary with sub.name, sub.id, sub.checked, mod1.name, mod1.checked, mod2.name ...
    4. Return to template with dictionary, don't use ListView model
    
    '''

    def get(self, request, *args, **kwargs):
        
        # Init model
        # The model will be a list of SubjectUpdate objects, start with an empty list
        model = []
        
        # Available data
        tutor_id = self.kwargs['tutor_id']
        
        # Fill out model by iterating through django models from database
        subject_list = Subject.objects.all()
        
        capability_list = list(Capability.objects.all().filter(tutor__id = tutor_id))
        
            
        
        for sub in subject_list:
            subUpdate = SubjectUpdate()
            subUpdate.tutor_id = tutor_id
            subUpdate.subject = sub
            
            try:
            
                # Make a subject form for this subject
                subForm = SubjectForm(instance = sub)
                subUpdate.subject_form = subForm
                
                
                # get the capability object for this tutor and subject
                #capsForSubject = capability_list.filter(subject__id = sub.id)
                
                cap = None
                for capability in capability_list:
                    if capability.subject.id == sub.id:
                        cap = capability
                
                #if capsForSubject.count() == 1:
                    #cap = capsForSubject[:1].get()
                subUpdate.capability = cap
                    
                    # Make a capability form for the found capability
                capForm = CapabilityForm(instance = cap)
                subUpdate.capability_form = capForm
                #elif capsForSubject.count() > 1:
                #    print("Multiple capabilities found for subject: "+ sub.name +" and tutorID: " + tutor_ID +". Delete one of the capabilities.")
                #else:
                #    subUpdate.capability = None
                #    subUpdate.capability_form = None
                
                model.append(subUpdate)
            except MultipleObjectsReturned:
                print("Multiple capabilities found for the same subject and tutor. Delete one of the capabilities.")
            
            
            
        context = RequestContext (request, {
            'model':model,
            'tutor_id':tutor_id,
            })
        return render(request, self.template_name, context)
    
    
    def post(self, request, *args, **kwargs):

        if request.is_ajax() == False:
            return "Request is not ajax"
        else:

            # Available Data
            tutor_id = self.kwargs['tutor_id']                      # From URL
            checkedOrUnchecked = request.POST.get('checked', '')    # These may not exist, check carefully
            subject_id = request.POST.get('subjectID', None)
            if subject_id == -1:subject_id = None
            capability_id = request.POST.get('capabilityID', None)
            if capability_id == -1: capability_id = None
            
            json_result = 'request is ajax'
            
            if checkedOrUnchecked == 'checked':
                
                cap = Capability.objects.create(subject_id=subject_id, tutor_id=tutor_id)
                sub_for_cap = cap.subject
                
                subUpdate = SubjectUpdate()
                subUpdate.tutor_id = tutor_id
                subUpdate.subject = sub_for_cap
                subForm = SubjectForm(instance = sub_for_cap)
                subUpdate.subject_form = subForm
                
                subUpdate.capability = cap
                
                capForm = CapabilityForm(instance = cap)
                subUpdate.capability_form = capForm
                
                model = []
                model.append(subUpdate)

                context = RequestContext (request, {
                    'model':model,
                    'tutor_id':tutor_id,
                    })
                return render(request, self.template_name, context)

            elif checkedOrUnchecked == 'unchecked':
                # Delete the capability for tutor_id and subject_id
                
                sub_for_cap = None
                
                try:                    
                    capability = Capability.objects.get(id=capability_id)
                    sub_for_cap = capability.subject
                    capability.delete()
                    
                except ObjectDoesNotExist:
                    print('Capability was deleted before it was created')
                
                
                if not sub_for_cap:
                    sub_for_cap = Subject.objects.get(id=subject_id)
                
                subUpdate = SubjectUpdate()
                
                subUpdate.subject = sub_for_cap
                #subForm = SubjectForm(instance = sub_for_cap)
                #subUpdate.subject_form = subForm
                
                subUpdate.capability = None
                
                model = []
                model.append(subUpdate)
                    
                context = RequestContext (request, {
                    'model':model,
                    'tutor_id':tutor_id,
                    })
                return render(request, self.template_name, context)
                
            else: 
                # Form was posted without the checkbox
                # Save updated capability
                
                # Available data
                tutor_id = self.kwargs['tutor_id']
                
                
                # Subject and Capability ID were passed in with the form
                subject_id = request.POST['subject_id_manual']
                sub = Subject.objects.get(id=subject_id)
                capability_id = request.POST['capability_id_manual']
                try:
                    cap = Capability.objects.get(id=capability_id)
                    # Convert data to form using the capability we want to update
                    capForm = CapabilityForm(request.POST, instance = cap)
                    print("Capability updated")
                except ObjectDoesNotExist:
                    capForm = CapabilityForm(request.POST)
                    print("New capability created")
                

                
                # If the form is valid, save it
                if capForm.is_valid():
                    cap = capForm.save(commit=False)
                    #sub = cap.subject # We have the option of getting the subject from the cap if the DB is slow
                    cap.save()
                else :
                    print("Form Fails")

                # Return form and model to template
                subUpdate = SubjectUpdate()
                subUpdate.capability = cap
                subUpdate.capability_form = capForm
                subUpdate.subject = sub
                
                model = []
                model.append(subUpdate)
                    
                context = RequestContext (request, {
                    'model':model,
                    'tutor_id':tutor_id,
                    'json_result': json_result,
                    })
                return render(request, self.template_name, context)
            
            
            
            return HttpResponse(simplejson.dumps(json_result),mimetype='application/json')


# View helpers. These do not return http responses

def findNextTutor(tutor_id):
 
    # tutor_id was the number in the URL
  try:
    currentTutor = Tutor.objects.all().filter(pk=tutor_id).get()    
    allTutors = Tutor.objects.all()
    
    nextTutor = None # we don't know what the next tutor is yet

    for index, tutor in enumerate(allTutors): # we just want to find the index of the tutor
    
    # find the current tutor in the list, make sure its no the last tutor in the list
        if tutor == currentTutor and index+1 < allTutors.count(): 
            nextTutor = allTutors[index+1:index+2][0]
    return nextTutor
  except:
    return HttpResponseRedirect('/tutorboard/0/update/')
    
        
def findPrevTutor(tutor_id):
    # tutor_id was the number in the URL
  try:
    currentTutor = Tutor.objects.all().filter(pk=tutor_id).get()
    allTutors = Tutor.objects.all()
    
    prevTutor = None # we don't know what the next tutor is yet

    for index, tutor in enumerate(allTutors): # we just want to find the index of the tutor
    
    # find the current tutor in the list, make sure its no the last tutor in the list
        if tutor == currentTutor and index+1 > 1: 
            prevTutor = allTutors[index-1:index][0]
    return prevTutor
  except:
    return HttpResponseRedirect('/tutorboard/0/update/')








